Бэкэнд приложения написан с использованием ASP.NET .core
Клиентская часть реализована с помощью библиотеки React .
В качестве СУБД  использовалось MS SQL Express 2018.
Строка подключения к базе данных находится в файле appsettings.json в ключе DefaultConnection.
Первая открывающаяся страница ( /Home/Index) - сам магазин с предложениями товаров. 
В этом разделе выполнено дополнительное задание, т.е реализована возможность покупки нескольких товаров перед получением сдачи.
Для этого была создана пользовательская корзина, куда можно заносить любое колиечтво товара. При этом если клиент, не в состояниии купить 
все предметы из корзины, то он может убрать оттуда часть этих предметов.
При перезагрузке страницы корзина сохраняется.
Также в корзину невозможно класть закончившиеся товары.
Для вывода сдачи реализован алгоритм вывода наименьшего количества монет.
Также есть панель администратора ( /Admin/Panel) - для получения досткпа к ней нужно передать секретный ключ в адресной строке . Ключ передается 
параметром key, и для данного приложения его значение равно key, т.е запрос  будет :  /Admin/Panel?key=key
На этой панели есть две кнопки управления . Одна из низ перемещает администратора на страницу с базой данных тоаров.
На этой странице можно изменять, добавлять, удалять товары. Для этого просто нужно нажать соответствующую кнопку для соответствующего товара.
При этом для операций добавления и изменения производится проверка корректности введенных данных. Проверка производится как на клиентской части,
так и на серверной части. 
Вторая кнопка направляет нас на страницу с базой данных о монетах. Здесь можно добавлять новые монеты, а также выводить некоторые монеты 
непринимаемыми в автомат . При этом производится проверка, что хотя бы одна монета должна приниматься.

1. Не используется подход CodeFirst
Переделал, теперь начал использоваться.

2. Не удобный скрипт создания БД. Нельзя без изменений запустить скрипт.
База теперь создается с использованием подхода CodeFirst чере код.


3. Вся логика в контролере. В контролере осуществляется только вызов, и проверка на валидацию. Лучше всего использовать IoC
Логика теперь реализована через механизм Dependency Injection . В контроллере осталась лишь логика валидации .

4. Работа с сущностями осуществляется на прямую, а не через ViewModel
Теперь испоьзуется ViewModel.

5. Отсутствуют связи в БД. Что говорит о не возможности проверить навыка проектирование БД.
Я создал таблицы со всеми продуктами, со всеми монетами, c заказами, с монетами , полученными от каждого заказа, и с продуктами, купленными в каждом заказе. Соотвественно между ними
имеется связь. При удалении продукта для избежания ошибки из за привязки из таблицы  с продуктами, купленными в каждом заказе удаляются поля 
с этим продуктом.

6. Бага при добавлении напитка. Сохраняется не верное имя.
Баг убран.

7. Лучше не использовать уведомления alert().
Теперь сообщения отображаются на странице.

8. Картинки лучше не хранить в base64 подгружать ленивой загрузкой и хранить на диске.
Теперь они зранятся на диске и подгружаются ленивой загрузкой. Однако теперь на странице редактирования новая картинка прогружается
только после обновления страницы, так как старая картинка кэшируется в браузере.

9. Плохая практика описывать логику в классе модели
Логика из классов убрана.